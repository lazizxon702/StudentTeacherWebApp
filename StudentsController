using Microsoft.AspNetCore.Mvc;
using StudentTeacher.DTOs;

using WebApplication1.Data;

using WebApplication1.Interface;


namespace WebApplication1.Controllers; 
[ApiController]
[Route("api/[controller]")]
public class StudentsController : ControllerBase
{
    public IStudentService _StudentService;
    public AppDbContext context;
    public StudentsController(IStudentService service , AppDbContext db) 
    {
        _StudentService = service;
        context = db;
    }
    /// GET ALL
    [HttpGet]
    public async Task<IActionResult> GetAllStudents()
    {
var students = await _StudentService.GetAllStudents();
        return Ok(students);
    }

    /// GET BY ID
    [HttpGet("{id:int}")]
    public async Task<IActionResult> GetStudentById(int id)
    {
        var dto = await _StudentService.servis(id);

        return Ok(dto);
    }


/// Create
    [HttpPost]
    public async Task<IActionResult> CreateStudent([FromBody] StudentCreateDto dto)
    {
     if (!ModelState.IsValid)
         return BadRequest(ModelState);

     var createdStudent = await _StudentService.PostStudent(dto);
     return Ok(createdStudent);
    }

    /// UPDATE
    [HttpPut("{id:int}")]
    public async Task<IActionResult> UpdateStudent(int id, [FromBody] StudentUpdateDto dto)
    {
        
        var updated = await _StudentService.StudentUpdate(id, dto);
        if (!updated) return NotFound();
        return NoContent();
    }

    /// DELETE
    [HttpDelete("{id:int}")]
    public async Task<IActionResult> DeleteStudent(int id)
    {
        var deleted = await _StudentService.StudentDelete(id);
        if (!deleted) return NotFound();
        return NoContent();
    }
}
