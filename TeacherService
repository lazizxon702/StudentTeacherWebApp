using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.EntityFrameworkCore;
using StudentTeacher.DTOs;
using StudentTeacher.Teacher;
using WebApplication1.Data;
using WebApplication1.Dto;
using WebApplication1.Interface;

namespace WebApplication1.Services;

public class TeacherService(AppDbContext db) : ITeacherService
{
    /// <summary>
    /// Teacher Read by id
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    public async Task<TeacherReadDto> servis(int id)
    {
        var t = await db.Teachers
            .Include(t => t.City)
            .Include(t => t.TeacherSubjects).ThenInclude(ts => ts.Subject)
            .FirstOrDefaultAsync(x => x.Id == id);
        
        var dto = new TeacherReadDto
        {
            //    Id = t.Id,
            Name = t.Name,
            CityName = t.City.Name,
            DateOfBirth = t.DateOfBirth,
            Gender = t.Gender,
            DepartmentId = t.DepartmentId
        };
        return dto;
    }

    


    /// <summary>
/// Teacher Create
/// </summary>
/// <param name="id"></param>
/// <returns></returns>

public  async Task<string?> PostTeacher(TeacherCreateDto dto)
{
    if (!await db.Cities.AnyAsync(c => c.Id == dto.CityId)) 
        return "City topilmadi";
    if (!await db.Departments.AnyAsync(d => d.Id == dto.DepartmentId))
        return "Department topilmadi!";
    if (!await db.Subjects.AnyAsync(s => s.Id == dto.SubjectId))
        return "Subject topilmadi!";
        // Entity yaratish
        var teacher = new Teacher
        {
            Name = dto.Name,
            CityId = dto.CityId,
            DateOfBirth = dto.DateOfBirth,
            Gender = dto.Gender,
            SubjectId = dto.SubjectId,
            DepartmentId = dto.DepartmentId
        };

        // DBga qo'shish
        await db.Teachers.AddAsync(teacher);
        await db.SaveChangesAsync();

        return "dto";
    }
  

/// <summary>
/// GetAllTeacher
/// </summary>
/// <returns></returns>
public async Task<TeacherReadDto?> GetAllTeacher()
    {
        var teachers = await db.Teachers
            .Include(t => t.City)
            .Include(t => t.TeacherSubjects).ThenInclude(ts => ts.Subject)
            .Select(t => new TeacherReadDto
            {
                Id = t.Id,
                Name = t.Name,
                CityName = t.City.Name,
                DateOfBirth = t.DateOfBirth,
                Gender = t.Gender,
                DepartmentId = t.DepartmentId
            }).ToListAsync();
        return teachers.FirstOrDefault();
    }

    public async Task<bool> TeacherUpdate(int id, TeacherUpdateDto dto)
    {
        var teacher = await db.Teachers.FindAsync(id);
        if (teacher == null) return false;
        
        teacher.Name = dto.Name;
        teacher.CityId = dto.CityId;
        teacher.DateOfBirth = dto.DateOfBirth;
        teacher.Gender = dto.Gender;
        teacher.SubjectId = dto.SubjectId;
        teacher.DepartmentId = dto.DepartmentId;
        teacher.LastUpdatedDate = DateTime.UtcNow;
        await db.SaveChangesAsync();
        return true;
    }

    public async Task<bool> TeacherDelete(int id)
    {
        var teacher = await db.Teachers.FindAsync(id);
        if (teacher == null) return false;
        db.Teachers.Remove(teacher);
        await db.SaveChangesAsync();
        return true;
    }
}
